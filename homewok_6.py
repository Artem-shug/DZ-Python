# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех
# уроков. Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для одной и той же задачи.
# Результаты анализа вставьте в виде комментариев к коду. Также укажите в комментариях версию Python и разрядность
# вашей ОС.

# Python 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)] on win32

from sys import getsizeof
from random import randint


# 1. В одномерном массиве целых чисел определить два наименьших элемента.
# Они могут быть как равны между собой (оба являться минимальными), так и различаться.

# 1 вариант
n = 10000
a = [randint(100, 10000) for i in range(n)]

b = sorted(a)[:2]
print(b)
print(getsizeof(a))# 85176 байт занимает 10000 элементов в списке
print(getsizeof(b))# 72 байта занимают 2 элемента

# 2. Матрица 5x4 заполняется вводом с клавиатуры кроме последних элементов строк.
# Программа должна вычислять сумму введенных элементов каждой строки и записывать ее в последнюю ячейку строки.
# В конце следует вывести полученную матрицу.

M = 5
N = 4
a = []
for i in range(N):
    b = []
    s = 0
    print(f'Строка {i + 1}: ')
    for j in range(M - 1):
        x = int(input())
        s += x
        b.append(x)
    b.append(s)
    a.append(b)
for i in a:
    print(i)

print(getsizeof(M)) # 28 байт занимает переменная М
print(getsizeof(N)) # байт занимает переменная N
print(getsizeof(a)) # 88 байт занимает список а

# 3. Во втором массиве сохранить индексы четных элементов первого массива. Например,
# если дан массив со значениями 8, 3, 15, 6, 4, 2, то во второй массив надо заполнить значениями 1, 4, 5, 6
# (или 0, 3, 4, 5 - если индексация начинается с нуля), т.к. именно в этих позициях первого массива стоят четные числа.


n = 100

a = [0] * n
b = []

for i in range(n):
    a[i] = randint(10, 50)
    if a[i] % 2 == 0:
        b.append(i)

print(a)
print('Четные позиции первого массива', b)

print(getsizeof(n)) # 28 байт занимает переменная n
print(getsizeof(a)) # 856 байт занимает список a
print(getsizeof(b)) # 472 байта занимают четные позиции массива a

